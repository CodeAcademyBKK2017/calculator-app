d1834ad7884adf85b4c2d05ad2bde0d4












'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var _require=

require('./AnimatedEvent'),AnimatedEvent=_require.AnimatedEvent;
var AnimatedProps=require('./nodes/AnimatedProps');
var React=require('React');
var ViewStylePropTypes=require('ViewStylePropTypes');

function createAnimatedComponent(Component){var
AnimatedComponent=function(_React$Component){_inherits(AnimatedComponent,_React$Component);








function AnimatedComponent(props){_classCallCheck(this,AnimatedComponent);var _this=_possibleConstructorReturn(this,(AnimatedComponent.__proto__||Object.getPrototypeOf(AnimatedComponent)).call(this,
props));_this._eventDetachers=[];
_this._setComponentRef=_this._setComponentRef.bind(_this);return _this;
}_createClass(AnimatedComponent,[{key:'componentWillUnmount',value:function componentWillUnmount()

{
this._propsAnimated&&this._propsAnimated.__detach();
this._detachNativeEvents();
}},{key:'setNativeProps',value:function setNativeProps(

props){
this._component.setNativeProps(props);
}},{key:'componentWillMount',value:function componentWillMount()

{
this._attachProps(this.props);
}},{key:'componentDidMount',value:function componentDidMount()

{
this._propsAnimated.setNativeView(this._component);
this._attachNativeEvents();
}},{key:'_attachNativeEvents',value:function _attachNativeEvents()

{var _this2=this;


var scrollableNode=this._component.getScrollableNode?
this._component.getScrollableNode():
this._component;var _loop=function _loop(

key){
var prop=_this2.props[key];
if(prop instanceof AnimatedEvent&&prop.__isNative){
prop.__attach(scrollableNode,key);
_this2._eventDetachers.push(function(){return prop.__detach(scrollableNode,key);});
}};for(var key in this.props){_loop(key);
}
}},{key:'_detachNativeEvents',value:function _detachNativeEvents()

{
this._eventDetachers.forEach(function(remove){return remove();});
this._eventDetachers=[];
}},{key:'_attachProps',value:function _attachProps(

nextProps){var _this3=this;
var oldPropsAnimated=this._propsAnimated;







var callback=function callback(){
if(
!AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY&&
_this3._component.setNativeProps)
{
if(!_this3._propsAnimated.__isNative){
_this3._component.setNativeProps(
_this3._propsAnimated.__getAnimatedValue());

}else{
throw new Error(
'Attempting to run JS driven animation on animated '+
'node that has been moved to "native" earlier by starting an '+
'animation with `useNativeDriver: true`');

}
}else{
_this3.forceUpdate();
}
};

this._propsAnimated=new AnimatedProps(nextProps,callback);









oldPropsAnimated&&oldPropsAnimated.__detach();
}},{key:'componentWillReceiveProps',value:function componentWillReceiveProps(

newProps){
this._attachProps(newProps);
}},{key:'componentDidUpdate',value:function componentDidUpdate(

prevProps){
if(this._component!==this._prevComponent){
this._propsAnimated.setNativeView(this._component);
}
if(this._component!==this._prevComponent||prevProps!==this.props){
this._detachNativeEvents();
this._attachNativeEvents();
}
}},{key:'render',value:function render()

{
var props=this._propsAnimated.__getValue();
return(
React.createElement(Component,_extends({},
props,{
ref:this._setComponentRef,




collapsable:
this._propsAnimated.__isNative?false:props.collapsable})));



}},{key:'_setComponentRef',value:function _setComponentRef(

c){
this._prevComponent=this._component;
this._component=c;
}},{key:'getNode',value:function getNode()



{
return this._component;
}}]);return AnimatedComponent;}(React.Component);AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY=false;







var propTypes=
Component.__propTypesSecretDontUseThesePlease||Component.propTypes;

AnimatedComponent.propTypes={
style:function style(props,propName,componentName){
if(!propTypes){
return;
}

for(var key in ViewStylePropTypes){
if(!propTypes[key]&&props[key]!==undefined){
console.warn(
'You are setting the style `{ '+
key+
': ... }` as a prop. You '+
'should nest it in a style object. '+
'E.g. `{ style: { '+
key+
': ... } }`');

}
}
}};


return AnimatedComponent;
}

module.exports=createAnimatedComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,