662d541419946b15d2094407832178f6











'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}

var invariant=require('fbjs/lib/invariant');var

EventHolder=function(){




function EventHolder(){_classCallCheck(this,EventHolder);
this._heldEvents={};
this._currentEventKey=null;
}_createClass(EventHolder,[{key:'holdEvent',value:function holdEvent(






















eventType){
this._heldEvents[eventType]=this._heldEvents[eventType]||[];
var eventsOfType=this._heldEvents[eventType];
var key={
eventType:eventType,
index:eventsOfType.length};for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}

eventsOfType.push(args);
return key;
}},{key:'emitToListener',value:function emitToListener(









eventType,listener,context){var _this=this;
var eventsOfType=this._heldEvents[eventType];
if(!eventsOfType){
return;
}
var origEventKey=this._currentEventKey;
eventsOfType.forEach(function(eventHeld,index){
if(!eventHeld){
return;
}
_this._currentEventKey={
eventType:eventType,
index:index};

listener.apply(context,eventHeld);
});
this._currentEventKey=origEventKey;
}},{key:'releaseCurrentEvent',value:function releaseCurrentEvent()









{
invariant(
this._currentEventKey!==null,
'Not in an emitting cycle; there is no current event');

this._currentEventKey&&this.releaseEvent(this._currentEventKey);
}},{key:'releaseEvent',value:function releaseEvent(







token){
delete this._heldEvents[token.eventType][token.index];
}},{key:'releaseEventType',value:function releaseEventType(






type){
this._heldEvents[type]=[];
}}]);return EventHolder;}();


module.exports=EventHolder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50SG9sZGVyLmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJFdmVudEhvbGRlciIsIl9oZWxkRXZlbnRzIiwiX2N1cnJlbnRFdmVudEtleSIsImV2ZW50VHlwZSIsImV2ZW50c09mVHlwZSIsImtleSIsImluZGV4IiwibGVuZ3RoIiwiYXJncyIsInB1c2giLCJsaXN0ZW5lciIsImNvbnRleHQiLCJvcmlnRXZlbnRLZXkiLCJmb3JFYWNoIiwiZXZlbnRIZWxkIiwiYXBwbHkiLCJyZWxlYXNlRXZlbnQiLCJ0b2tlbiIsInR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVdBLGE7O0FBRUEsR0FBTUEsV0FBWUMsUUFBUSxvQkFBUixDQUFsQixDOztBQUVNQyxXOzs7OztBQUtKLHNCQUFjO0FBQ1osS0FBS0MsV0FBTCxDQUFtQixFQUFuQjtBQUNBLEtBQUtDLGdCQUFMLENBQXdCLElBQXhCO0FBQ0QsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QlNDLFMsQ0FBaUM7QUFDekMsS0FBS0YsV0FBTCxDQUFpQkUsU0FBakIsRUFBOEIsS0FBS0YsV0FBTCxDQUFpQkUsU0FBakIsR0FBK0IsRUFBN0Q7QUFDQSxHQUFNQyxjQUFlLEtBQUtILFdBQUwsQ0FBaUJFLFNBQWpCLENBQXJCO0FBQ0EsR0FBTUUsS0FBTTtBQUNWRixVQUFXQSxTQUREO0FBRVZHLE1BQU9GLGFBQWFHLE1BRlYsQ0FBWixDQUh5Qyw4QkFBWEMsSUFBVyxpREFBWEEsSUFBVzs7QUFPekNKLGFBQWFLLElBQWIsQ0FBa0JELElBQWxCO0FBQ0EsTUFBT0gsSUFBUDtBQUNELEM7Ozs7Ozs7Ozs7QUFVY0YsUyxDQUFxQk8sUSxDQUFvQkMsTyxDQUFrQjtBQUN4RSxHQUFNUCxjQUFlLEtBQUtILFdBQUwsQ0FBaUJFLFNBQWpCLENBQXJCO0FBQ0EsR0FBSSxDQUFDQyxZQUFMLENBQW1CO0FBQ2pCO0FBQ0Q7QUFDRCxHQUFNUSxjQUFlLEtBQUtWLGdCQUExQjtBQUNBRSxhQUFhUyxPQUFiLENBQXFCLFNBQVlDLFNBQVosQ0FBa0NSLEtBQWxDLENBQTRDO0FBQy9ELEdBQUksQ0FBQ1EsU0FBTCxDQUFnQjtBQUNkO0FBQ0Q7QUFDRCxNQUFLWixnQkFBTCxDQUF3QjtBQUN0QkMsVUFBV0EsU0FEVztBQUV0QkcsTUFBT0EsS0FGZSxDQUF4Qjs7QUFJQUksU0FBU0ssS0FBVCxDQUFlSixPQUFmLENBQXdCRyxTQUF4QjtBQUNELENBVEQ7QUFVQSxLQUFLWixnQkFBTCxDQUF3QlUsWUFBeEI7QUFDRCxDOzs7Ozs7Ozs7O0FBVXFCO0FBQ3BCZDtBQUNFLEtBQUtJLGdCQUFMLEdBQTBCLElBRDVCO0FBRUUscURBRkY7O0FBSUEsS0FBS0EsZ0JBQUwsRUFBeUIsS0FBS2MsWUFBTCxDQUFrQixLQUFLZCxnQkFBdkIsQ0FBekI7QUFDRCxDOzs7Ozs7OztBQVFZZSxLLENBQWU7QUFDMUIsTUFBTyxNQUFLaEIsV0FBTCxDQUFpQmdCLE1BQU1kLFNBQXZCLEVBQWtDYyxNQUFNWCxLQUF4QyxDQUFQO0FBQ0QsQzs7Ozs7OztBQU9nQlksSSxDQUFjO0FBQzdCLEtBQUtqQixXQUFMLENBQWlCaUIsSUFBakIsRUFBeUIsRUFBekI7QUFDRCxDOzs7QUFHSEMsT0FBT0MsT0FBUCxDQUFpQnBCLFdBQWpCIiwiZmlsZSI6IkV2ZW50SG9sZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudEhvbGRlclxuICogQGZsb3dcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuY2xhc3MgRXZlbnRIb2xkZXIge1xuXG4gIF9oZWxkRXZlbnRzOiBPYmplY3Q7XG4gIF9jdXJyZW50RXZlbnRLZXk6ID9PYmplY3Q7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5faGVsZEV2ZW50cyA9IHt9O1xuICAgIHRoaXMuX2N1cnJlbnRFdmVudEtleSA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogSG9sZHMgYSBnaXZlbiBldmVudCBmb3IgcHJvY2Vzc2luZyBsYXRlci5cbiAgICpcbiAgICogVE9ETzogQW5ub3RhdGUgcmV0dXJuIHR5cGUgYmV0dGVyLiBUaGUgc3RydWN0dXJhbCB0eXBlIG9mIHRoZSByZXR1cm4gaGVyZVxuICAgKiAgICAgICBpcyBwcmV0dHkgb2J2aW91cy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSAtIE5hbWUgb2YgdGhlIGV2ZW50IHRvIGhvbGQgYW5kIGxhdGVyIGVtaXRcbiAgICogQHBhcmFtIHsuLi4qfSBBcmJpdHJhcnkgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBlYWNoIHJlZ2lzdGVyZWQgbGlzdGVuZXJcbiAgICogQHJldHVybiB7b2JqZWN0fSBUb2tlbiB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlbGVhc2UgdGhlIGhlbGQgZXZlbnRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogICBob2xkZXIuaG9sZEV2ZW50KHtzb21lRXZlbnQ6ICdhYmMnfSk7XG4gICAqXG4gICAqICAgaG9sZGVyLmVtaXRUb0hhbmRsZXIoe1xuICAgKiAgICAgc29tZUV2ZW50OiBmdW5jdGlvbihkYXRhLCBldmVudCkge1xuICAgKiAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICogICAgIH1cbiAgICogICB9KTsgLy9sb2dzICdhYmMnXG4gICAqXG4gICAqL1xuICBob2xkRXZlbnQoZXZlbnRUeXBlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueSkge1xuICAgIHRoaXMuX2hlbGRFdmVudHNbZXZlbnRUeXBlXSA9IHRoaXMuX2hlbGRFdmVudHNbZXZlbnRUeXBlXSB8fCBbXTtcbiAgICBjb25zdCBldmVudHNPZlR5cGUgPSB0aGlzLl9oZWxkRXZlbnRzW2V2ZW50VHlwZV07XG4gICAgY29uc3Qga2V5ID0ge1xuICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICBpbmRleDogZXZlbnRzT2ZUeXBlLmxlbmd0aFxuICAgIH07XG4gICAgZXZlbnRzT2ZUeXBlLnB1c2goYXJncyk7XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0cyB0aGUgaGVsZCBldmVudHMgb2YgdGhlIHNwZWNpZmllZCB0eXBlIHRvIHRoZSBnaXZlbiBsaXN0ZW5lci5cbiAgICpcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBldmVudFR5cGUgLSBPcHRpb25hbCBuYW1lIG9mIHRoZSBldmVudHMgdG8gcmVwbGF5XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGxpc3RlbmVyIHRvIHdoaWNoIHRvIGRpc3BhdGNoIHRoZSBldmVudFxuICAgKiBAcGFyYW0gez9vYmplY3R9IGNvbnRleHQgLSBPcHRpb25hbCBjb250ZXh0IG9iamVjdCB0byB1c2Ugd2hlbiBpbnZva2luZ1xuICAgKiAgIHRoZSBsaXN0ZW5lclxuICAgKi9cbiAgZW1pdFRvTGlzdGVuZXIoZXZlbnRUeXBlOiA/c3RyaW5nICwgbGlzdGVuZXI6IEZ1bmN0aW9uLCBjb250ZXh0OiA/T2JqZWN0KSB7XG4gICAgY29uc3QgZXZlbnRzT2ZUeXBlID0gdGhpcy5faGVsZEV2ZW50c1tldmVudFR5cGVdO1xuICAgIGlmICghZXZlbnRzT2ZUeXBlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG9yaWdFdmVudEtleSA9IHRoaXMuX2N1cnJlbnRFdmVudEtleTtcbiAgICBldmVudHNPZlR5cGUuZm9yRWFjaCgoLyo/YXJyYXkqLyBldmVudEhlbGQsIC8qbnVtYmVyKi8gaW5kZXgpID0+IHtcbiAgICAgIGlmICghZXZlbnRIZWxkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2N1cnJlbnRFdmVudEtleSA9IHtcbiAgICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgfTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KGNvbnRleHQsIGV2ZW50SGVsZCk7XG4gICAgfSk7XG4gICAgdGhpcy5fY3VycmVudEV2ZW50S2V5ID0gb3JpZ0V2ZW50S2V5O1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGFuIEFQSSB0aGF0IGNhbiBiZSBjYWxsZWQgZHVyaW5nIGFuIGV2ZW50aW5nIGN5Y2xlIHRvIHJlbGVhc2VcbiAgICogdGhlIGxhc3QgZXZlbnQgdGhhdCB3YXMgaW52b2tlZCwgc28gdGhhdCBpdCBpcyBubyBsb25nZXIgXCJoZWxkXCIuXG4gICAqXG4gICAqIElmIGl0IGlzIGNhbGxlZCB3aGVuIG5vdCBpbnNpZGUgb2YgYW4gZW1pdHRpbmcgY3ljbGUgaXQgd2lsbCB0aHJvdy5cbiAgICpcbiAgICogQHRocm93cyB7RXJyb3J9IFdoZW4gY2FsbGVkIG5vdCBkdXJpbmcgYW4gZXZlbnRpbmcgY3ljbGVcbiAgICovXG4gIHJlbGVhc2VDdXJyZW50RXZlbnQoKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdGhpcy5fY3VycmVudEV2ZW50S2V5ICE9PSBudWxsLFxuICAgICAgJ05vdCBpbiBhbiBlbWl0dGluZyBjeWNsZTsgdGhlcmUgaXMgbm8gY3VycmVudCBldmVudCdcbiAgICApO1xuICAgIHRoaXMuX2N1cnJlbnRFdmVudEtleSAmJiB0aGlzLnJlbGVhc2VFdmVudCh0aGlzLl9jdXJyZW50RXZlbnRLZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbGVhc2VzIHRoZSBldmVudCBjb3JyZXNwb25kaW5nIHRvIHRoZSBoYW5kbGUgdGhhdCB3YXMgcmV0dXJuZWQgd2hlbiB0aGVcbiAgICogZXZlbnQgd2FzIGZpcnN0IGhlbGQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0b2tlbiAtIFRoZSB0b2tlbiByZXR1cm5lZCBmcm9tIGhvbGRFdmVudFxuICAgKi9cbiAgcmVsZWFzZUV2ZW50KHRva2VuOiBPYmplY3QpIHtcbiAgICBkZWxldGUgdGhpcy5faGVsZEV2ZW50c1t0b2tlbi5ldmVudFR5cGVdW3Rva2VuLmluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbGwgZXZlbnRzIG9mIGEgY2VydGFpbiB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKi9cbiAgcmVsZWFzZUV2ZW50VHlwZSh0eXBlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9oZWxkRXZlbnRzW3R5cGVdID0gW107XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEhvbGRlcjtcbiJdfQ==