407f0e77c0a7a87e3fe517eabf54d43a











'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};



var Animated=require('Animated');
var Easing=require('Easing');
var NativeMethodsMixin=require('NativeMethodsMixin');
var React=require('React');
var PropTypes=require('prop-types');
var TimerMixin=require('react-timer-mixin');
var Touchable=require('Touchable');
var TouchableWithoutFeedback=require('TouchableWithoutFeedback');

var createReactClass=require('create-react-class');
var ensurePositiveDelayProps=require('ensurePositiveDelayProps');
var flattenStyle=require('flattenStyle');



var PRESS_RETENTION_OFFSET={top:20,left:20,right:20,bottom:30};

























































































var TouchableOpacity=createReactClass({
displayName:'TouchableOpacity',
mixins:[TimerMixin,Touchable.Mixin,NativeMethodsMixin],

propTypes:_extends({},
TouchableWithoutFeedback.propTypes,{




activeOpacity:PropTypes.number,





hasTVPreferredFocus:PropTypes.bool,



tvParallaxProperties:PropTypes.object}),


getDefaultProps:function getDefaultProps(){
return{
activeOpacity:0.2};

},

getInitialState:function getInitialState(){
return _extends({},
this.touchableGetInitialState(),{
anim:new Animated.Value(this._getChildStyleOpacityWithDefault())});

},

componentDidMount:function componentDidMount(){
ensurePositiveDelayProps(this.props);
},

componentWillReceiveProps:function componentWillReceiveProps(nextProps){
ensurePositiveDelayProps(nextProps);
},




setOpacityTo:function setOpacityTo(value,duration){
Animated.timing(
this.state.anim,
{
toValue:value,
duration:duration,
easing:Easing.inOut(Easing.quad),
useNativeDriver:true}).

start();
},





touchableHandleActivePressIn:function touchableHandleActivePressIn(e){
if(e.dispatchConfig.registrationName==='onResponderGrant'){
this._opacityActive(0);
}else{
this._opacityActive(150);
}
this.props.onPressIn&&this.props.onPressIn(e);
},

touchableHandleActivePressOut:function touchableHandleActivePressOut(e){
this._opacityInactive(250);
this.props.onPressOut&&this.props.onPressOut(e);
},

touchableHandlePress:function touchableHandlePress(e){
this.props.onPress&&this.props.onPress(e);
},

touchableHandleLongPress:function touchableHandleLongPress(e){
this.props.onLongPress&&this.props.onLongPress(e);
},

touchableGetPressRectOffset:function touchableGetPressRectOffset(){
return this.props.pressRetentionOffset||PRESS_RETENTION_OFFSET;
},

touchableGetHitSlop:function touchableGetHitSlop(){
return this.props.hitSlop;
},

touchableGetHighlightDelayMS:function touchableGetHighlightDelayMS(){
return this.props.delayPressIn||0;
},

touchableGetLongPressDelayMS:function touchableGetLongPressDelayMS(){
return this.props.delayLongPress===0?0:
this.props.delayLongPress||500;
},

touchableGetPressOutDelayMS:function touchableGetPressOutDelayMS(){
return this.props.delayPressOut;
},

_opacityActive:function _opacityActive(duration){
this.setOpacityTo(this.props.activeOpacity,duration);
},

_opacityInactive:function _opacityInactive(duration){
this.setOpacityTo(
this._getChildStyleOpacityWithDefault(),
duration);

},

_getChildStyleOpacityWithDefault:function _getChildStyleOpacityWithDefault(){
var childStyle=flattenStyle(this.props.style)||{};
return childStyle.opacity==undefined?1:childStyle.opacity;
},

render:function render(){
return(
React.createElement(Animated.View,{
accessible:this.props.accessible!==false,
accessibilityLabel:this.props.accessibilityLabel,
accessibilityComponentType:this.props.accessibilityComponentType,
accessibilityTraits:this.props.accessibilityTraits,
style:[this.props.style,{opacity:this.state.anim}],
nativeID:this.props.nativeID,
testID:this.props.testID,
onLayout:this.props.onLayout,
isTVSelectable:true,
hasTVPreferredFocus:this.props.hasTVPreferredFocus,
tvParallaxProperties:this.props.tvParallaxProperties,
hitSlop:this.props.hitSlop,
onStartShouldSetResponder:this.touchableHandleStartShouldSetResponder,
onResponderTerminationRequest:this.touchableHandleResponderTerminationRequest,
onResponderGrant:this.touchableHandleResponderGrant,
onResponderMove:this.touchableHandleResponderMove,
onResponderRelease:this.touchableHandleResponderRelease,
onResponderTerminate:this.touchableHandleResponderTerminate},
this.props.children,
Touchable.renderDebugView({color:'cyan',hitSlop:this.props.hitSlop})));


}});


module.exports=TouchableOpacity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,