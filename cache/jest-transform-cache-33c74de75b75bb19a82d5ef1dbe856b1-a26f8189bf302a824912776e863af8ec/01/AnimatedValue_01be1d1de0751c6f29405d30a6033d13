951f5b6c8e71797c631e35580f6fa183












'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _get=function get(object,property,receiver){if(object===null)object=Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc===undefined){var parent=Object.getPrototypeOf(object);if(parent===null){return undefined;}else{return get(parent,property,receiver);}}else if("value"in desc){return desc.value;}else{var getter=desc.get;if(getter===undefined){return undefined;}return getter.call(receiver);}};function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}

var AnimatedInterpolation=require('./AnimatedInterpolation');
var AnimatedNode=require('./AnimatedNode');
var AnimatedWithChildren=require('./AnimatedWithChildren');
var InteractionManager=require('InteractionManager');
var NativeAnimatedHelper=require('../NativeAnimatedHelper');




var NativeAnimatedAPI=NativeAnimatedHelper.API;



var _uniqueId=1;























function _flush(rootNode){
var animatedStyles=new Set();
function findAnimatedStyles(node){
if(typeof node.update==='function'){
animatedStyles.add(node);
}else{
node.__getChildren().forEach(findAnimatedStyles);
}
}
findAnimatedStyles(rootNode);

animatedStyles.forEach(function(animatedStyle){return animatedStyle.update();});
}var







AnimatedValue=function(_AnimatedWithChildren){_inherits(AnimatedValue,_AnimatedWithChildren);








function AnimatedValue(value){_classCallCheck(this,AnimatedValue);var _this=_possibleConstructorReturn(this,(AnimatedValue.__proto__||Object.getPrototypeOf(AnimatedValue)).call(this));

_this._startingValue=_this._value=value;
_this._offset=0;
_this._animation=null;
_this._listeners={};return _this;
}_createClass(AnimatedValue,[{key:'__detach',value:function __detach()

{
this.stopAnimation();
_get(AnimatedValue.prototype.__proto__||Object.getPrototypeOf(AnimatedValue.prototype),'__detach',this).call(this);
}},{key:'__getValue',value:function __getValue()

{
return this._value+this._offset;
}},{key:'__makeNative',value:function __makeNative()

{
_get(AnimatedValue.prototype.__proto__||Object.getPrototypeOf(AnimatedValue.prototype),'__makeNative',this).call(this);

if(Object.keys(this._listeners).length){
this._startListeningToNativeValueUpdates();
}
}},{key:'setValue',value:function setValue(





value){
if(this._animation){
this._animation.stop();
this._animation=null;
}
this._updateValue(
value,
!this.__isNative);

if(this.__isNative){
NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(),value);
}
}},{key:'setOffset',value:function setOffset(






offset){
this._offset=offset;
if(this.__isNative){
NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(),offset);
}
}},{key:'flattenOffset',value:function flattenOffset()





{
this._value+=this._offset;
this._offset=0;
if(this.__isNative){
NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
}
}},{key:'extractOffset',value:function extractOffset()





{
this._offset+=this._value;
this._value=0;
if(this.__isNative){
NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
}
}},{key:'addListener',value:function addListener(






callback){
var id=String(_uniqueId++);
this._listeners[id]=callback;
if(this.__isNative){
this._startListeningToNativeValueUpdates();
}
return id;
}},{key:'removeListener',value:function removeListener(

id){
delete this._listeners[id];
if(this.__isNative&&Object.keys(this._listeners).length===0){
this._stopListeningForNativeValueUpdates();
}
}},{key:'removeAllListeners',value:function removeAllListeners()

{
this._listeners={};
if(this.__isNative){
this._stopListeningForNativeValueUpdates();
}
}},{key:'_startListeningToNativeValueUpdates',value:function _startListeningToNativeValueUpdates()

{var _this2=this;
if(this.__nativeAnimatedValueListener){
return;
}

NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
this.__nativeAnimatedValueListener=NativeAnimatedHelper.nativeEventEmitter.addListener(
'onAnimatedValueUpdate',
function(data){
if(data.tag!==_this2.__getNativeTag()){
return;
}
_this2._updateValue(data.value,false);
});

}},{key:'_stopListeningForNativeValueUpdates',value:function _stopListeningForNativeValueUpdates()

{
if(!this.__nativeAnimatedValueListener){
return;
}

this.__nativeAnimatedValueListener.remove();
this.__nativeAnimatedValueListener=null;
NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
}},{key:'stopAnimation',value:function stopAnimation(






callback){
this.stopTracking();
this._animation&&this._animation.stop();
this._animation=null;
callback&&callback(this.__getValue());
}},{key:'resetAnimation',value:function resetAnimation(




callback){
this.stopAnimation(callback);
this._value=this._startingValue;
}},{key:'interpolate',value:function interpolate(





config){
return new AnimatedInterpolation(this,config);
}},{key:'animate',value:function animate(





animation,callback){var _this3=this;
var handle=null;
if(animation.__isInteraction){
handle=InteractionManager.createInteractionHandle();
}
var previousAnimation=this._animation;
this._animation&&this._animation.stop();
this._animation=animation;
animation.start(
this._value,
function(value){


_this3._updateValue(value,true);
},
function(result){
_this3._animation=null;
if(handle!==null){
InteractionManager.clearInteractionHandle(handle);
}
callback&&callback(result);
},
previousAnimation,
this);

}},{key:'stopTracking',value:function stopTracking()




{
this._tracking&&this._tracking.__detach();
this._tracking=null;
}},{key:'track',value:function track(




tracking){
this.stopTracking();
this._tracking=tracking;
}},{key:'_updateValue',value:function _updateValue(

value,flush){
this._value=value;
if(flush){
_flush(this);
}
for(var _key in this._listeners){
this._listeners[_key]({value:this.__getValue()});
}
}},{key:'__getNativeConfig',value:function __getNativeConfig()

{
return{
type:'value',
value:this._value,
offset:this._offset};

}}]);return AnimatedValue;}(AnimatedWithChildren);


module.exports=AnimatedValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkVmFsdWUuanMiXSwibmFtZXMiOlsiQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIiwicmVxdWlyZSIsIkFuaW1hdGVkTm9kZSIsIkFuaW1hdGVkV2l0aENoaWxkcmVuIiwiSW50ZXJhY3Rpb25NYW5hZ2VyIiwiTmF0aXZlQW5pbWF0ZWRIZWxwZXIiLCJOYXRpdmVBbmltYXRlZEFQSSIsIkFQSSIsIl91bmlxdWVJZCIsIl9mbHVzaCIsInJvb3ROb2RlIiwiYW5pbWF0ZWRTdHlsZXMiLCJTZXQiLCJmaW5kQW5pbWF0ZWRTdHlsZXMiLCJub2RlIiwidXBkYXRlIiwiYWRkIiwiX19nZXRDaGlsZHJlbiIsImZvckVhY2giLCJhbmltYXRlZFN0eWxlIiwiQW5pbWF0ZWRWYWx1ZSIsInZhbHVlIiwiX3N0YXJ0aW5nVmFsdWUiLCJfdmFsdWUiLCJfb2Zmc2V0IiwiX2FuaW1hdGlvbiIsIl9saXN0ZW5lcnMiLCJzdG9wQW5pbWF0aW9uIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsIl9zdGFydExpc3RlbmluZ1RvTmF0aXZlVmFsdWVVcGRhdGVzIiwic3RvcCIsIl91cGRhdGVWYWx1ZSIsIl9faXNOYXRpdmUiLCJzZXRBbmltYXRlZE5vZGVWYWx1ZSIsIl9fZ2V0TmF0aXZlVGFnIiwib2Zmc2V0Iiwic2V0QW5pbWF0ZWROb2RlT2Zmc2V0IiwiZmxhdHRlbkFuaW1hdGVkTm9kZU9mZnNldCIsImV4dHJhY3RBbmltYXRlZE5vZGVPZmZzZXQiLCJjYWxsYmFjayIsImlkIiwiU3RyaW5nIiwiX3N0b3BMaXN0ZW5pbmdGb3JOYXRpdmVWYWx1ZVVwZGF0ZXMiLCJfX25hdGl2ZUFuaW1hdGVkVmFsdWVMaXN0ZW5lciIsInN0YXJ0TGlzdGVuaW5nVG9BbmltYXRlZE5vZGVWYWx1ZSIsIm5hdGl2ZUV2ZW50RW1pdHRlciIsImFkZExpc3RlbmVyIiwiZGF0YSIsInRhZyIsInJlbW92ZSIsInN0b3BMaXN0ZW5pbmdUb0FuaW1hdGVkTm9kZVZhbHVlIiwic3RvcFRyYWNraW5nIiwiX19nZXRWYWx1ZSIsImNvbmZpZyIsImFuaW1hdGlvbiIsImhhbmRsZSIsIl9faXNJbnRlcmFjdGlvbiIsImNyZWF0ZUludGVyYWN0aW9uSGFuZGxlIiwicHJldmlvdXNBbmltYXRpb24iLCJzdGFydCIsImNsZWFySW50ZXJhY3Rpb25IYW5kbGUiLCJyZXN1bHQiLCJfdHJhY2tpbmciLCJfX2RldGFjaCIsInRyYWNraW5nIiwiZmx1c2giLCJrZXkiLCJ0eXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBWUEsYTs7QUFFQSxHQUFNQSx1QkFBd0JDLFFBQVEseUJBQVIsQ0FBOUI7QUFDQSxHQUFNQyxjQUFlRCxRQUFRLGdCQUFSLENBQXJCO0FBQ0EsR0FBTUUsc0JBQXVCRixRQUFRLHdCQUFSLENBQTdCO0FBQ0EsR0FBTUcsb0JBQXFCSCxRQUFRLG9CQUFSLENBQTNCO0FBQ0EsR0FBTUksc0JBQXVCSixRQUFRLHlCQUFSLENBQTdCOzs7OztBQUtBLEdBQU1LLG1CQUFvQkQscUJBQXFCRSxHQUEvQzs7OztBQUlBLEdBQUlDLFdBQVksQ0FBaEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQSxRQUFTQyxPQUFULENBQWdCQyxRQUFoQixDQUErQztBQUM3QyxHQUFNQyxnQkFBaUIsR0FBSUMsSUFBSixFQUF2QjtBQUNBLFFBQVNDLG1CQUFULENBQTRCQyxJQUE1QixDQUFrQztBQUNoQyxHQUFJLE1BQU9BLE1BQUtDLE1BQVosR0FBdUIsVUFBM0IsQ0FBdUM7QUFDckNKLGVBQWVLLEdBQWYsQ0FBbUJGLElBQW5CO0FBQ0QsQ0FGRCxJQUVPO0FBQ0xBLEtBQUtHLGFBQUwsR0FBcUJDLE9BQXJCLENBQTZCTCxrQkFBN0I7QUFDRDtBQUNGO0FBQ0RBLG1CQUFtQkgsUUFBbkI7O0FBRUFDLGVBQWVPLE9BQWYsQ0FBdUIsOEJBQWlCQyxlQUFjSixNQUFkLEVBQWpCLEVBQXZCO0FBQ0QsQzs7Ozs7Ozs7QUFRS0ssYTs7Ozs7Ozs7O0FBU0osdUJBQVlDLEtBQVosQ0FB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QUNuQnJELG1CQUFtQjBELHNCQUFuQixDQUEwQ0wsTUFBMUM7QUFDRDtBQUNEaEIsVUFBWUEsU0FBU3NCLE1BQVQsQ0FBWjtBQUNELENBYkg7QUFjRUgsaUJBZEY7QUFlRSxJQWZGOztBQWlCRCxDOzs7OztBQUtvQjtBQUNuQixLQUFLSSxTQUFMLEVBQWtCLEtBQUtBLFNBQUwsQ0FBZUMsUUFBZixFQUFsQjtBQUNBLEtBQUtELFNBQUwsQ0FBaUIsSUFBakI7QUFDRCxDOzs7OztBQUtLRSxRLENBQThCO0FBQ2xDLEtBQUtiLFlBQUw7QUFDQSxLQUFLVyxTQUFMLENBQWlCRSxRQUFqQjtBQUNELEM7O0FBRVk3QyxLLENBQWU4QyxLLENBQXNCO0FBQ2hELEtBQUs1QyxNQUFMLENBQWNGLEtBQWQ7QUFDQSxHQUFJOEMsS0FBSixDQUFXO0FBQ1QxRCxPQUFPLElBQVA7QUFDRDtBQUNELElBQUssR0FBTTJELEtBQVgsR0FBa0IsTUFBSzFDLFVBQXZCLENBQW1DO0FBQ2pDLEtBQUtBLFVBQUwsQ0FBZ0IwQyxJQUFoQixFQUFxQixDQUFDL0MsTUFBTyxLQUFLaUMsVUFBTCxFQUFSLENBQXJCO0FBQ0Q7QUFDRixDOztBQUUyQjtBQUMxQixNQUFPO0FBQ0xlLEtBQU0sT0FERDtBQUVMaEQsTUFBTyxLQUFLRSxNQUZQO0FBR0xjLE9BQVEsS0FBS2IsT0FIUixDQUFQOztBQUtELEMsMkJBMU95QnJCLG9COzs7QUE2TzVCbUUsT0FBT0MsT0FBUCxDQUFpQm5ELGFBQWpCIiwiZmlsZSI6IkFuaW1hdGVkVmFsdWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEFuaW1hdGVkVmFsdWVcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQW5pbWF0ZWRJbnRlcnBvbGF0aW9uID0gcmVxdWlyZSgnLi9BbmltYXRlZEludGVycG9sYXRpb24nKTtcbmNvbnN0IEFuaW1hdGVkTm9kZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWROb2RlJyk7XG5jb25zdCBBbmltYXRlZFdpdGhDaGlsZHJlbiA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRXaXRoQ2hpbGRyZW4nKTtcbmNvbnN0IEludGVyYWN0aW9uTWFuYWdlciA9IHJlcXVpcmUoJ0ludGVyYWN0aW9uTWFuYWdlcicpO1xuY29uc3QgTmF0aXZlQW5pbWF0ZWRIZWxwZXIgPSByZXF1aXJlKCcuLi9OYXRpdmVBbmltYXRlZEhlbHBlcicpO1xuXG5pbXBvcnQgdHlwZSBBbmltYXRpb24sIHtFbmRDYWxsYmFja30gZnJvbSAnLi4vYW5pbWF0aW9ucy9BbmltYXRpb24nO1xuaW1wb3J0IHR5cGUge0ludGVycG9sYXRpb25Db25maWdUeXBlfSBmcm9tICcuL0FuaW1hdGVkSW50ZXJwb2xhdGlvbic7XG5cbmNvbnN0IE5hdGl2ZUFuaW1hdGVkQVBJID0gTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJO1xuXG50eXBlIFZhbHVlTGlzdGVuZXJDYWxsYmFjayA9IChzdGF0ZToge3ZhbHVlOiBudW1iZXJ9KSA9PiB2b2lkO1xuXG5sZXQgX3VuaXF1ZUlkID0gMTtcblxuLyoqXG4gKiBBbmltYXRlZCB3b3JrcyBieSBidWlsZGluZyBhIGRpcmVjdGVkIGFjeWNsaWMgZ3JhcGggb2YgZGVwZW5kZW5jaWVzXG4gKiB0cmFuc3BhcmVudGx5IHdoZW4geW91IHJlbmRlciB5b3VyIEFuaW1hdGVkIGNvbXBvbmVudHMuXG4gKlxuICogICAgICAgICAgICAgICBuZXcgQW5pbWF0ZWQuVmFsdWUoMClcbiAqICAgICAuaW50ZXJwb2xhdGUoKSAgICAgICAgLmludGVycG9sYXRlKCkgICAgbmV3IEFuaW1hdGVkLlZhbHVlKDEpXG4gKiAgICAgICAgIG9wYWNpdHkgICAgICAgICAgICAgICB0cmFuc2xhdGVZICAgICAgc2NhbGVcbiAqICAgICAgICAgIHN0eWxlICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybVxuICogICAgICAgICBWaWV3IzIzNCAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcjMTIzXG4gKlxuICogQSkgVG9wIERvd24gcGhhc2VcbiAqIFdoZW4gYW4gQW5pbWF0ZWQuVmFsdWUgaXMgdXBkYXRlZCwgd2UgcmVjdXJzaXZlbHkgZ28gZG93biB0aHJvdWdoIHRoaXNcbiAqIGdyYXBoIGluIG9yZGVyIHRvIGZpbmQgbGVhZiBub2RlczogdGhlIHZpZXdzIHRoYXQgd2UgZmxhZyBhcyBuZWVkaW5nXG4gKiBhbiB1cGRhdGUuXG4gKlxuICogQikgQm90dG9tIFVwIHBoYXNlXG4gKiBXaGVuIGEgdmlldyBpcyBmbGFnZ2VkIGFzIG5lZWRpbmcgYW4gdXBkYXRlLCB3ZSByZWN1cnNpdmVseSBnbyBiYWNrIHVwXG4gKiBpbiBvcmRlciB0byBidWlsZCB0aGUgbmV3IHZhbHVlIHRoYXQgaXQgbmVlZHMuIFRoZSByZWFzb24gd2h5IHdlIG5lZWRcbiAqIHRoaXMgdHdvLXBoYXNlcyBwcm9jZXNzIGlzIHRvIGRlYWwgd2l0aCBjb21wb3NpdGUgcHJvcHMgc3VjaCBhc1xuICogdHJhbnNmb3JtIHdoaWNoIGNhbiByZWNlaXZlIHZhbHVlcyBmcm9tIG11bHRpcGxlIHBhcmVudHMuXG4gKi9cbmZ1bmN0aW9uIF9mbHVzaChyb290Tm9kZTogQW5pbWF0ZWRWYWx1ZSk6IHZvaWQge1xuICBjb25zdCBhbmltYXRlZFN0eWxlcyA9IG5ldyBTZXQoKTtcbiAgZnVuY3Rpb24gZmluZEFuaW1hdGVkU3R5bGVzKG5vZGUpIHtcbiAgICBpZiAodHlwZW9mIG5vZGUudXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhbmltYXRlZFN0eWxlcy5hZGQobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuX19nZXRDaGlsZHJlbigpLmZvckVhY2goZmluZEFuaW1hdGVkU3R5bGVzKTtcbiAgICB9XG4gIH1cbiAgZmluZEFuaW1hdGVkU3R5bGVzKHJvb3ROb2RlKTtcbiAgLyogJEZsb3dGaXhNZSAqL1xuICBhbmltYXRlZFN0eWxlcy5mb3JFYWNoKGFuaW1hdGVkU3R5bGUgPT4gYW5pbWF0ZWRTdHlsZS51cGRhdGUoKSk7XG59XG5cbi8qKlxuICogU3RhbmRhcmQgdmFsdWUgZm9yIGRyaXZpbmcgYW5pbWF0aW9ucy4gIE9uZSBgQW5pbWF0ZWQuVmFsdWVgIGNhbiBkcml2ZVxuICogbXVsdGlwbGUgcHJvcGVydGllcyBpbiBhIHN5bmNocm9uaXplZCBmYXNoaW9uLCBidXQgY2FuIG9ubHkgYmUgZHJpdmVuIGJ5IG9uZVxuICogbWVjaGFuaXNtIGF0IGEgdGltZS4gIFVzaW5nIGEgbmV3IG1lY2hhbmlzbSAoZS5nLiBzdGFydGluZyBhIG5ldyBhbmltYXRpb24sXG4gKiBvciBjYWxsaW5nIGBzZXRWYWx1ZWApIHdpbGwgc3RvcCBhbnkgcHJldmlvdXMgb25lcy5cbiAqL1xuY2xhc3MgQW5pbWF0ZWRWYWx1ZSBleHRlbmRzIEFuaW1hdGVkV2l0aENoaWxkcmVuIHtcbiAgX3ZhbHVlOiBudW1iZXI7XG4gIF9zdGFydGluZ1ZhbHVlOiBudW1iZXI7XG4gIF9vZmZzZXQ6IG51bWJlcjtcbiAgX2FuaW1hdGlvbjogP0FuaW1hdGlvbjtcbiAgX3RyYWNraW5nOiA/QW5pbWF0ZWROb2RlO1xuICBfbGlzdGVuZXJzOiB7W2tleTogc3RyaW5nXTogVmFsdWVMaXN0ZW5lckNhbGxiYWNrfTtcbiAgX19uYXRpdmVBbmltYXRlZFZhbHVlTGlzdGVuZXI6ID9hbnk7XG5cbiAgY29uc3RydWN0b3IodmFsdWU6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc3RhcnRpbmdWYWx1ZSA9IHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgICB0aGlzLl9hbmltYXRpb24gPSBudWxsO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICB9XG5cbiAgX19kZXRhY2goKSB7XG4gICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgc3VwZXIuX19kZXRhY2goKTtcbiAgfVxuXG4gIF9fZ2V0VmFsdWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgKyB0aGlzLl9vZmZzZXQ7XG4gIH1cblxuICBfX21ha2VOYXRpdmUoKSB7XG4gICAgc3VwZXIuX19tYWtlTmF0aXZlKCk7XG5cbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fbGlzdGVuZXJzKS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3N0YXJ0TGlzdGVuaW5nVG9OYXRpdmVWYWx1ZVVwZGF0ZXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGlyZWN0bHkgc2V0IHRoZSB2YWx1ZS4gIFRoaXMgd2lsbCBzdG9wIGFueSBhbmltYXRpb25zIHJ1bm5pbmcgb24gdGhlIHZhbHVlXG4gICAqIGFuZCB1cGRhdGUgYWxsIHRoZSBib3VuZCBwcm9wZXJ0aWVzLlxuICAgKi9cbiAgc2V0VmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLl9hbmltYXRpb24pIHtcbiAgICAgIHRoaXMuX2FuaW1hdGlvbi5zdG9wKCk7XG4gICAgICB0aGlzLl9hbmltYXRpb24gPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVWYWx1ZShcbiAgICAgIHZhbHVlLFxuICAgICAgIXRoaXMuX19pc05hdGl2ZSAvKiBkb24ndCBwZXJmb3JtIGEgZmx1c2ggZm9yIG5hdGl2ZWx5IGRyaXZlbiB2YWx1ZXMgKi8sXG4gICAgKTtcbiAgICBpZiAodGhpcy5fX2lzTmF0aXZlKSB7XG4gICAgICBOYXRpdmVBbmltYXRlZEFQSS5zZXRBbmltYXRlZE5vZGVWYWx1ZSh0aGlzLl9fZ2V0TmF0aXZlVGFnKCksIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBvZmZzZXQgdGhhdCBpcyBhcHBsaWVkIG9uIHRvcCBvZiB3aGF0ZXZlciB2YWx1ZSBpcyBzZXQsIHdoZXRoZXIgdmlhXG4gICAqIGBzZXRWYWx1ZWAsIGFuIGFuaW1hdGlvbiwgb3IgYEFuaW1hdGVkLmV2ZW50YC4gIFVzZWZ1bCBmb3IgY29tcGVuc2F0aW5nXG4gICAqIHRoaW5ncyBsaWtlIHRoZSBzdGFydCBvZiBhIHBhbiBnZXN0dXJlLlxuICAgKi9cbiAgc2V0T2Zmc2V0KG9mZnNldDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fb2Zmc2V0ID0gb2Zmc2V0O1xuICAgIGlmICh0aGlzLl9faXNOYXRpdmUpIHtcbiAgICAgIE5hdGl2ZUFuaW1hdGVkQVBJLnNldEFuaW1hdGVkTm9kZU9mZnNldCh0aGlzLl9fZ2V0TmF0aXZlVGFnKCksIG9mZnNldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlcyB0aGUgb2Zmc2V0IHZhbHVlIGludG8gdGhlIGJhc2UgdmFsdWUgYW5kIHJlc2V0cyB0aGUgb2Zmc2V0IHRvIHplcm8uXG4gICAqIFRoZSBmaW5hbCBvdXRwdXQgb2YgdGhlIHZhbHVlIGlzIHVuY2hhbmdlZC5cbiAgICovXG4gIGZsYXR0ZW5PZmZzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5fdmFsdWUgKz0gdGhpcy5fb2Zmc2V0O1xuICAgIHRoaXMuX29mZnNldCA9IDA7XG4gICAgaWYgKHRoaXMuX19pc05hdGl2ZSkge1xuICAgICAgTmF0aXZlQW5pbWF0ZWRBUEkuZmxhdHRlbkFuaW1hdGVkTm9kZU9mZnNldCh0aGlzLl9fZ2V0TmF0aXZlVGFnKCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBvZmZzZXQgdmFsdWUgdG8gdGhlIGJhc2UgdmFsdWUsIGFuZCByZXNldHMgdGhlIGJhc2UgdmFsdWUgdG8gemVyby5cbiAgICogVGhlIGZpbmFsIG91dHB1dCBvZiB0aGUgdmFsdWUgaXMgdW5jaGFuZ2VkLlxuICAgKi9cbiAgZXh0cmFjdE9mZnNldCgpOiB2b2lkIHtcbiAgICB0aGlzLl9vZmZzZXQgKz0gdGhpcy5fdmFsdWU7XG4gICAgdGhpcy5fdmFsdWUgPSAwO1xuICAgIGlmICh0aGlzLl9faXNOYXRpdmUpIHtcbiAgICAgIE5hdGl2ZUFuaW1hdGVkQVBJLmV4dHJhY3RBbmltYXRlZE5vZGVPZmZzZXQodGhpcy5fX2dldE5hdGl2ZVRhZygpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBhc3luY2hyb25vdXMgbGlzdGVuZXIgdG8gdGhlIHZhbHVlIHNvIHlvdSBjYW4gb2JzZXJ2ZSB1cGRhdGVzIGZyb21cbiAgICogYW5pbWF0aW9ucy4gIFRoaXMgaXMgdXNlZnVsIGJlY2F1c2UgdGhlcmUgaXMgbm8gd2F5IHRvXG4gICAqIHN5bmNocm9ub3VzbHkgcmVhZCB0aGUgdmFsdWUgYmVjYXVzZSBpdCBtaWdodCBiZSBkcml2ZW4gbmF0aXZlbHkuXG4gICAqL1xuICBhZGRMaXN0ZW5lcihjYWxsYmFjazogVmFsdWVMaXN0ZW5lckNhbGxiYWNrKTogc3RyaW5nIHtcbiAgICBjb25zdCBpZCA9IFN0cmluZyhfdW5pcXVlSWQrKyk7XG4gICAgdGhpcy5fbGlzdGVuZXJzW2lkXSA9IGNhbGxiYWNrO1xuICAgIGlmICh0aGlzLl9faXNOYXRpdmUpIHtcbiAgICAgIHRoaXMuX3N0YXJ0TGlzdGVuaW5nVG9OYXRpdmVWYWx1ZVVwZGF0ZXMoKTtcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xuICB9XG5cbiAgcmVtb3ZlTGlzdGVuZXIoaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lcnNbaWRdO1xuICAgIGlmICh0aGlzLl9faXNOYXRpdmUgJiYgT2JqZWN0LmtleXModGhpcy5fbGlzdGVuZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuX3N0b3BMaXN0ZW5pbmdGb3JOYXRpdmVWYWx1ZVVwZGF0ZXMoKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVBbGxMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgaWYgKHRoaXMuX19pc05hdGl2ZSkge1xuICAgICAgdGhpcy5fc3RvcExpc3RlbmluZ0Zvck5hdGl2ZVZhbHVlVXBkYXRlcygpO1xuICAgIH1cbiAgfVxuXG4gIF9zdGFydExpc3RlbmluZ1RvTmF0aXZlVmFsdWVVcGRhdGVzKCkge1xuICAgIGlmICh0aGlzLl9fbmF0aXZlQW5pbWF0ZWRWYWx1ZUxpc3RlbmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgTmF0aXZlQW5pbWF0ZWRBUEkuc3RhcnRMaXN0ZW5pbmdUb0FuaW1hdGVkTm9kZVZhbHVlKHRoaXMuX19nZXROYXRpdmVUYWcoKSk7XG4gICAgdGhpcy5fX25hdGl2ZUFuaW1hdGVkVmFsdWVMaXN0ZW5lciA9IE5hdGl2ZUFuaW1hdGVkSGVscGVyLm5hdGl2ZUV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcihcbiAgICAgICdvbkFuaW1hdGVkVmFsdWVVcGRhdGUnLFxuICAgICAgZGF0YSA9PiB7XG4gICAgICAgIGlmIChkYXRhLnRhZyAhPT0gdGhpcy5fX2dldE5hdGl2ZVRhZygpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZVZhbHVlKGRhdGEudmFsdWUsIGZhbHNlIC8qIGZsdXNoICovKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIF9zdG9wTGlzdGVuaW5nRm9yTmF0aXZlVmFsdWVVcGRhdGVzKCkge1xuICAgIGlmICghdGhpcy5fX25hdGl2ZUFuaW1hdGVkVmFsdWVMaXN0ZW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX19uYXRpdmVBbmltYXRlZFZhbHVlTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgdGhpcy5fX25hdGl2ZUFuaW1hdGVkVmFsdWVMaXN0ZW5lciA9IG51bGw7XG4gICAgTmF0aXZlQW5pbWF0ZWRBUEkuc3RvcExpc3RlbmluZ1RvQW5pbWF0ZWROb2RlVmFsdWUodGhpcy5fX2dldE5hdGl2ZVRhZygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyBhbnkgcnVubmluZyBhbmltYXRpb24gb3IgdHJhY2tpbmcuICBgY2FsbGJhY2tgIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICogZmluYWwgdmFsdWUgYWZ0ZXIgc3RvcHBpbmcgdGhlIGFuaW1hdGlvbiwgd2hpY2ggaXMgdXNlZnVsIGZvciB1cGRhdGluZ1xuICAgKiBzdGF0ZSB0byBtYXRjaCB0aGUgYW5pbWF0aW9uIHBvc2l0aW9uIHdpdGggbGF5b3V0LlxuICAgKi9cbiAgc3RvcEFuaW1hdGlvbihjYWxsYmFjaz86ID8odmFsdWU6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcFRyYWNraW5nKCk7XG4gICAgdGhpcy5fYW5pbWF0aW9uICYmIHRoaXMuX2FuaW1hdGlvbi5zdG9wKCk7XG4gICAgdGhpcy5fYW5pbWF0aW9uID0gbnVsbDtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjayh0aGlzLl9fZ2V0VmFsdWUoKSk7XG4gIH1cblxuICAvKipcbiAgKiBTdG9wcyBhbnkgYW5pbWF0aW9uIGFuZCByZXNldHMgdGhlIHZhbHVlIHRvIGl0cyBvcmlnaW5hbFxuICAqL1xuICByZXNldEFuaW1hdGlvbihjYWxsYmFjaz86ID8odmFsdWU6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcEFuaW1hdGlvbihjYWxsYmFjayk7XG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9zdGFydGluZ1ZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVycG9sYXRlcyB0aGUgdmFsdWUgYmVmb3JlIHVwZGF0aW5nIHRoZSBwcm9wZXJ0eSwgZS5nLiBtYXBwaW5nIDAtMSB0b1xuICAgKiAwLTEwLlxuICAgKi9cbiAgaW50ZXJwb2xhdGUoY29uZmlnOiBJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZSk6IEFuaW1hdGVkSW50ZXJwb2xhdGlvbiB7XG4gICAgcmV0dXJuIG5ldyBBbmltYXRlZEludGVycG9sYXRpb24odGhpcywgY29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUeXBpY2FsbHkgb25seSB1c2VkIGludGVybmFsbHksIGJ1dCBjb3VsZCBiZSB1c2VkIGJ5IGEgY3VzdG9tIEFuaW1hdGlvblxuICAgKiBjbGFzcy5cbiAgICovXG4gIGFuaW1hdGUoYW5pbWF0aW9uOiBBbmltYXRpb24sIGNhbGxiYWNrOiA/RW5kQ2FsbGJhY2spOiB2b2lkIHtcbiAgICBsZXQgaGFuZGxlID0gbnVsbDtcbiAgICBpZiAoYW5pbWF0aW9uLl9faXNJbnRlcmFjdGlvbikge1xuICAgICAgaGFuZGxlID0gSW50ZXJhY3Rpb25NYW5hZ2VyLmNyZWF0ZUludGVyYWN0aW9uSGFuZGxlKCk7XG4gICAgfVxuICAgIGNvbnN0IHByZXZpb3VzQW5pbWF0aW9uID0gdGhpcy5fYW5pbWF0aW9uO1xuICAgIHRoaXMuX2FuaW1hdGlvbiAmJiB0aGlzLl9hbmltYXRpb24uc3RvcCgpO1xuICAgIHRoaXMuX2FuaW1hdGlvbiA9IGFuaW1hdGlvbjtcbiAgICBhbmltYXRpb24uc3RhcnQoXG4gICAgICB0aGlzLl92YWx1ZSxcbiAgICAgIHZhbHVlID0+IHtcbiAgICAgICAgLy8gTmF0aXZlbHkgZHJpdmVuIGFuaW1hdGlvbnMgd2lsbCBuZXZlciBjYWxsIGludG8gdGhhdCBjYWxsYmFjaywgdGhlcmVmb3JlIHdlIGNhbiBhbHdheXNcbiAgICAgICAgLy8gcGFzcyBmbHVzaCA9IHRydWUgdG8gYWxsb3cgdGhlIHVwZGF0ZWQgdmFsdWUgdG8gcHJvcGFnYXRlIHRvIG5hdGl2ZSB3aXRoIHNldE5hdGl2ZVByb3BzXG4gICAgICAgIHRoaXMuX3VwZGF0ZVZhbHVlKHZhbHVlLCB0cnVlIC8qIGZsdXNoICovKTtcbiAgICAgIH0sXG4gICAgICByZXN1bHQgPT4ge1xuICAgICAgICB0aGlzLl9hbmltYXRpb24gPSBudWxsO1xuICAgICAgICBpZiAoaGFuZGxlICE9PSBudWxsKSB7XG4gICAgICAgICAgSW50ZXJhY3Rpb25NYW5hZ2VyLmNsZWFySW50ZXJhY3Rpb25IYW5kbGUoaGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIHByZXZpb3VzQW5pbWF0aW9uLFxuICAgICAgdGhpcyxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFR5cGljYWxseSBvbmx5IHVzZWQgaW50ZXJuYWxseS5cbiAgICovXG4gIHN0b3BUcmFja2luZygpOiB2b2lkIHtcbiAgICB0aGlzLl90cmFja2luZyAmJiB0aGlzLl90cmFja2luZy5fX2RldGFjaCgpO1xuICAgIHRoaXMuX3RyYWNraW5nID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUeXBpY2FsbHkgb25seSB1c2VkIGludGVybmFsbHkuXG4gICAqL1xuICB0cmFjayh0cmFja2luZzogQW5pbWF0ZWROb2RlKTogdm9pZCB7XG4gICAgdGhpcy5zdG9wVHJhY2tpbmcoKTtcbiAgICB0aGlzLl90cmFja2luZyA9IHRyYWNraW5nO1xuICB9XG5cbiAgX3VwZGF0ZVZhbHVlKHZhbHVlOiBudW1iZXIsIGZsdXNoOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAoZmx1c2gpIHtcbiAgICAgIF9mbHVzaCh0aGlzKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnNba2V5XSh7dmFsdWU6IHRoaXMuX19nZXRWYWx1ZSgpfSk7XG4gICAgfVxuICB9XG5cbiAgX19nZXROYXRpdmVDb25maWcoKTogT2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3ZhbHVlJyxcbiAgICAgIHZhbHVlOiB0aGlzLl92YWx1ZSxcbiAgICAgIG9mZnNldDogdGhpcy5fb2Zmc2V0LFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBbmltYXRlZFZhbHVlO1xuIl19