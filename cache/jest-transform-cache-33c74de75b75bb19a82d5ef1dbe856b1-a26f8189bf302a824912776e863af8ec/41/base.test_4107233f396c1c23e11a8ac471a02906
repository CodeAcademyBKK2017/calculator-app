4f5d9ab3ace01bb9a2b5e2f6ab6c5ad2
require('react-native');
var _BaseView=require('../BaseView.component');var _BaseView2=_interopRequireDefault(_BaseView);
var _react=require('react');var _react2=_interopRequireDefault(_react);


var _reactTestRenderer=require('react-test-renderer');var _reactTestRenderer2=_interopRequireDefault(_reactTestRenderer);
var _enzyme=require('enzyme');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

describe('App',function(){
var wrapper=void 0,instance=void 0;

beforeEach(function(){
wrapper=(0,_enzyme.shallow)(_react2.default.createElement(_BaseView2.default,null));
instance=wrapper.instance();
});

it('renders correctly',function(){
var tree=_reactTestRenderer2.default.create(
_react2.default.createElement(_BaseView2.default,null));

expect(tree).toBeDefined();
});

it('BaseView: renders correctly',function(){
var tree=_reactTestRenderer2.default.create(_react2.default.createElement(_BaseView2.default,null)).toJSON();
expect(tree).toMatchSnapshot();
});

it('BaseView: setFirstnum must set in state',function(){
instance._setFirstnum(1);
expect(instance.state.Firstnum).toEqual(1);
});

it('BaseView: setSecondnum must set in state',function(){
instance._setSecondnum(1);
expect(instance.state.Secondnum).toEqual(1);
});

it('BaseView: clearResultFunc must clear result state',function(){
instance._clearResultFunc();
expect(instance.state.result).toEqual(0);
});

it('BaseView: plusOparateFunc must summation correct',function(){
expect(instance.state.result).toEqual(0);
instance._plusOparateFunc(1,1).then(function(){
expect(instance.state.result).toEqual(2);
});

});

it('BaseView: minusOparateFunc must subtraction correct',function(){
expect(instance.state.result).toEqual(0);
instance._minusOparateFunc(1,1);
expect(instance.state.result).toEqual(0);
});

it('BaseView: multiplyOparateFunc must multiplying correct',function(){
expect(instance.state.result).toEqual(0);
instance._multiplyOparateFunc(2,2);
expect(instance.state.result).toEqual(4);
});
it('BaseView: divideOparateFunc must dividing correct',function(){
expect(instance.state.result).toEqual(0);
instance._divideOparateFunc(2,2);
expect(instance.state.result).toEqual(1);
});

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIndyYXBwZXIiLCJpbnN0YW5jZSIsImJlZm9yZUVhY2giLCJpdCIsInRyZWUiLCJjcmVhdGUiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsInRvSlNPTiIsInRvTWF0Y2hTbmFwc2hvdCIsIl9zZXRGaXJzdG51bSIsInN0YXRlIiwiRmlyc3RudW0iLCJ0b0VxdWFsIiwiX3NldFNlY29uZG51bSIsIlNlY29uZG51bSIsIl9jbGVhclJlc3VsdEZ1bmMiLCJyZXN1bHQiLCJfcGx1c09wYXJhdGVGdW5jIiwidGhlbiIsIl9taW51c09wYXJhdGVGdW5jIiwiX211bHRpcGx5T3BhcmF0ZUZ1bmMiLCJfZGl2aWRlT3BhcmF0ZUZ1bmMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsK0M7QUFDQSw0Qjs7O0FBR0Esc0Q7QUFDQSw4Qjs7QUFFQUEsU0FBUyxLQUFULENBQWdCLFVBQU07QUFDcEIsR0FBSUMsZUFBSixDQUFhQyxlQUFiOztBQUVBQyxXQUFXLFVBQU07QUFDZkYsUUFBVSxvQkFBUSxzREFBUixDQUFWO0FBQ0FDLFNBQVdELFFBQVFDLFFBQVIsRUFBWDtBQUNELENBSEQ7O0FBS0FFLEdBQUcsbUJBQUgsQ0FBd0IsVUFBTTtBQUM1QixHQUFNQyxNQUFPLDRCQUFTQyxNQUFUO0FBQ1gsc0RBRFcsQ0FBYjs7QUFHQUMsT0FBT0YsSUFBUCxFQUFhRyxXQUFiO0FBQ0QsQ0FMRDs7QUFPQUosR0FBRyw2QkFBSCxDQUFrQyxVQUFNO0FBQ3RDLEdBQU1DLE1BQU8sNEJBQVNDLE1BQVQsQ0FBZ0Isc0RBQWhCLEVBQThCRyxNQUE5QixFQUFiO0FBQ0FGLE9BQU9GLElBQVAsRUFBYUssZUFBYjtBQUNELENBSEQ7O0FBS0FOLEdBQUcseUNBQUgsQ0FBOEMsVUFBTTtBQUNsREYsU0FBU1MsWUFBVCxDQUFzQixDQUF0QjtBQUNBSixPQUFPTCxTQUFTVSxLQUFULENBQWVDLFFBQXRCLEVBQWdDQyxPQUFoQyxDQUF3QyxDQUF4QztBQUNELENBSEQ7O0FBS0FWLEdBQUcsMENBQUgsQ0FBK0MsVUFBTTtBQUNuREYsU0FBU2EsYUFBVCxDQUF1QixDQUF2QjtBQUNBUixPQUFPTCxTQUFTVSxLQUFULENBQWVJLFNBQXRCLEVBQWlDRixPQUFqQyxDQUF5QyxDQUF6QztBQUNELENBSEQ7O0FBS0FWLEdBQUcsbURBQUgsQ0FBd0QsVUFBTTtBQUM1REYsU0FBU2UsZ0JBQVQ7QUFDQVYsT0FBT0wsU0FBU1UsS0FBVCxDQUFlTSxNQUF0QixFQUE4QkosT0FBOUIsQ0FBc0MsQ0FBdEM7QUFDRCxDQUhEOztBQUtBVixHQUFHLGtEQUFILENBQXVELFVBQU07QUFDM0RHLE9BQU9MLFNBQVNVLEtBQVQsQ0FBZU0sTUFBdEIsRUFBOEJKLE9BQTlCLENBQXNDLENBQXRDO0FBQ0FaLFNBQVNpQixnQkFBVCxDQUEwQixDQUExQixDQUE2QixDQUE3QixFQUFnQ0MsSUFBaEMsQ0FBcUMsVUFBTTtBQUN6Q2IsT0FBT0wsU0FBU1UsS0FBVCxDQUFlTSxNQUF0QixFQUE4QkosT0FBOUIsQ0FBc0MsQ0FBdEM7QUFDRCxDQUZEOztBQUlELENBTkQ7O0FBUUFWLEdBQUcscURBQUgsQ0FBMEQsVUFBTTtBQUM5REcsT0FBT0wsU0FBU1UsS0FBVCxDQUFlTSxNQUF0QixFQUE4QkosT0FBOUIsQ0FBc0MsQ0FBdEM7QUFDQVosU0FBU21CLGlCQUFULENBQTJCLENBQTNCLENBQThCLENBQTlCO0FBQ0FkLE9BQU9MLFNBQVNVLEtBQVQsQ0FBZU0sTUFBdEIsRUFBOEJKLE9BQTlCLENBQXNDLENBQXRDO0FBQ0QsQ0FKRDs7QUFNQVYsR0FBRyx3REFBSCxDQUE2RCxVQUFNO0FBQ2pFRyxPQUFPTCxTQUFTVSxLQUFULENBQWVNLE1BQXRCLEVBQThCSixPQUE5QixDQUFzQyxDQUF0QztBQUNBWixTQUFTb0Isb0JBQVQsQ0FBOEIsQ0FBOUIsQ0FBaUMsQ0FBakM7QUFDQWYsT0FBT0wsU0FBU1UsS0FBVCxDQUFlTSxNQUF0QixFQUE4QkosT0FBOUIsQ0FBc0MsQ0FBdEM7QUFDRCxDQUpEO0FBS0FWLEdBQUcsbURBQUgsQ0FBd0QsVUFBTTtBQUM1REcsT0FBT0wsU0FBU1UsS0FBVCxDQUFlTSxNQUF0QixFQUE4QkosT0FBOUIsQ0FBc0MsQ0FBdEM7QUFDQVosU0FBU3FCLGtCQUFULENBQTRCLENBQTVCLENBQStCLENBQS9CO0FBQ0FoQixPQUFPTCxTQUFTVSxLQUFULENBQWVNLE1BQXRCLEVBQThCSixPQUE5QixDQUFzQyxDQUF0QztBQUNELENBSkQ7O0FBTUQsQ0E1REQiLCJmaWxlIjoiYmFzZS50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEJhc2VWaWV3IGZyb20gJy4uL0Jhc2VWaWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vLyBOb3RlOiB0ZXN0IHJlbmRlcmVyIG11c3QgYmUgcmVxdWlyZWQgYWZ0ZXIgcmVhY3QtbmF0aXZlLlxuaW1wb3J0IHJlbmRlcmVyIGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IHtzaGFsbG93fSBmcm9tICdlbnp5bWUnO1xuXG5kZXNjcmliZSgnQXBwJywgKCkgPT4ge1xuICBsZXQgd3JhcHBlciwgaW5zdGFuY2U7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgd3JhcHBlciA9IHNoYWxsb3coPEJhc2VWaWV3Lz4pO1xuICAgIGluc3RhbmNlID0gd3JhcHBlci5pbnN0YW5jZSgpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZShcbiAgICAgIDxCYXNlVmlldyAvPlxuICAgICk7XG4gICAgZXhwZWN0KHRyZWUpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdCYXNlVmlldzogcmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZSg8QmFzZVZpZXcgLz4pLnRvSlNPTigpO1xuICAgIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoJ0Jhc2VWaWV3OiBzZXRGaXJzdG51bSBtdXN0IHNldCBpbiBzdGF0ZScsICgpID0+IHtcbiAgICBpbnN0YW5jZS5fc2V0Rmlyc3RudW0oMSk7XG4gICAgZXhwZWN0KGluc3RhbmNlLnN0YXRlLkZpcnN0bnVtKS50b0VxdWFsKDEpO1xuICB9KTtcblxuICBpdCgnQmFzZVZpZXc6IHNldFNlY29uZG51bSBtdXN0IHNldCBpbiBzdGF0ZScsICgpID0+IHtcbiAgICBpbnN0YW5jZS5fc2V0U2Vjb25kbnVtKDEpO1xuICAgIGV4cGVjdChpbnN0YW5jZS5zdGF0ZS5TZWNvbmRudW0pLnRvRXF1YWwoMSk7XG4gIH0pO1xuXG4gIGl0KCdCYXNlVmlldzogY2xlYXJSZXN1bHRGdW5jIG11c3QgY2xlYXIgcmVzdWx0IHN0YXRlJywgKCkgPT4ge1xuICAgIGluc3RhbmNlLl9jbGVhclJlc3VsdEZ1bmMoKTtcbiAgICBleHBlY3QoaW5zdGFuY2Uuc3RhdGUucmVzdWx0KS50b0VxdWFsKDApO1xuICB9KTtcblxuICBpdCgnQmFzZVZpZXc6IHBsdXNPcGFyYXRlRnVuYyBtdXN0IHN1bW1hdGlvbiBjb3JyZWN0JywgKCkgPT4ge1xuICAgIGV4cGVjdChpbnN0YW5jZS5zdGF0ZS5yZXN1bHQpLnRvRXF1YWwoMCk7XG4gICAgaW5zdGFuY2UuX3BsdXNPcGFyYXRlRnVuYygxLCAxKS50aGVuKCgpID0+IHsgXG4gICAgICBleHBlY3QoaW5zdGFuY2Uuc3RhdGUucmVzdWx0KS50b0VxdWFsKDIpOyBcbiAgICB9KTtcbiAgICBcbiAgfSk7XG5cbiAgaXQoJ0Jhc2VWaWV3OiBtaW51c09wYXJhdGVGdW5jIG11c3Qgc3VidHJhY3Rpb24gY29ycmVjdCcsICgpID0+IHtcbiAgICBleHBlY3QoaW5zdGFuY2Uuc3RhdGUucmVzdWx0KS50b0VxdWFsKDApO1xuICAgIGluc3RhbmNlLl9taW51c09wYXJhdGVGdW5jKDEsIDEpO1xuICAgIGV4cGVjdChpbnN0YW5jZS5zdGF0ZS5yZXN1bHQpLnRvRXF1YWwoMCk7XG4gIH0pO1xuXG4gIGl0KCdCYXNlVmlldzogbXVsdGlwbHlPcGFyYXRlRnVuYyBtdXN0IG11bHRpcGx5aW5nIGNvcnJlY3QnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGluc3RhbmNlLnN0YXRlLnJlc3VsdCkudG9FcXVhbCgwKTtcbiAgICBpbnN0YW5jZS5fbXVsdGlwbHlPcGFyYXRlRnVuYygyLCAyKTtcbiAgICBleHBlY3QoaW5zdGFuY2Uuc3RhdGUucmVzdWx0KS50b0VxdWFsKDQpO1xuICB9KTtcbiAgaXQoJ0Jhc2VWaWV3OiBkaXZpZGVPcGFyYXRlRnVuYyBtdXN0IGRpdmlkaW5nIGNvcnJlY3QnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGluc3RhbmNlLnN0YXRlLnJlc3VsdCkudG9FcXVhbCgwKTtcbiAgICBpbnN0YW5jZS5fZGl2aWRlT3BhcmF0ZUZ1bmMoMiwgMik7XG4gICAgZXhwZWN0KGluc3RhbmNlLnN0YXRlLnJlc3VsdCkudG9FcXVhbCgxKTtcbiAgfSk7XG5cbn0pO1xuIl19