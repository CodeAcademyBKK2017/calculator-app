a10874745686cb60d312d57ce18e4d6f











'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};

var ColorPropType=require('ColorPropType');
var DocumentSelectionState=require('DocumentSelectionState');
var EventEmitter=require('EventEmitter');
var NativeMethodsMixin=require('NativeMethodsMixin');
var Platform=require('Platform');
var React=require('React');
var createReactClass=require('create-react-class');
var PropTypes=require('prop-types');
var ReactNative=require('ReactNative');
var StyleSheet=require('StyleSheet');
var Text=require('Text');
var TextInputState=require('TextInputState');



var TimerMixin=require('react-timer-mixin');
var TouchableWithoutFeedback=require('TouchableWithoutFeedback');
var UIManager=require('UIManager');
var ViewPropTypes=require('ViewPropTypes');




var emptyFunction=require('fbjs/lib/emptyFunction');
var invariant=require('fbjs/lib/invariant');
var requireNativeComponent=require('requireNativeComponent');



var warning=require('fbjs/lib/warning');

var onlyMultiline={
onTextInput:true,
children:true};


if(Platform.OS==='android'){
var AndroidTextInput=requireNativeComponent('AndroidTextInput',null);
}else if(Platform.OS==='ios'){
var RCTTextView=requireNativeComponent('RCTTextView',null);
var RCTTextField=requireNativeComponent('RCTTextField',null);
}







var DataDetectorTypes=[
'phoneNumber',
'link',
'address',
'calendarEvent',
'none',
'all'];


















































































































var TextInput=createReactClass({
displayName:'TextInput',
statics:{

State:TextInputState},


propTypes:_extends({},
ViewPropTypes,{








autoCapitalize:PropTypes.oneOf([
'none',
'sentences',
'words',
'characters']),




autoCorrect:PropTypes.bool,





spellCheck:PropTypes.bool,




autoFocus:PropTypes.bool,






autoGrow:PropTypes.bool,




allowFontScaling:PropTypes.bool,



editable:PropTypes.bool,





























keyboardType:PropTypes.oneOf([

'default',
'email-address',
'numeric',
'phone-pad',

'ascii-capable',
'numbers-and-punctuation',
'url',
'number-pad',
'name-phone-pad',
'decimal-pad',
'twitter',
'web-search',

'visible-password']),





keyboardAppearance:PropTypes.oneOf([
'default',
'light',
'dark']),

































returnKeyType:PropTypes.oneOf([

'done',
'go',
'next',
'search',
'send',

'none',
'previous',

'default',
'emergency-call',
'google',
'join',
'route',
'yahoo']),





returnKeyLabel:PropTypes.string,




maxLength:PropTypes.number,




maxHeight:PropTypes.number,





numberOfLines:PropTypes.number,








disableFullscreenUI:PropTypes.bool,





enablesReturnKeyAutomatically:PropTypes.bool,




multiline:PropTypes.bool,





textBreakStrategy:PropTypes.oneOf(['simple','highQuality','balanced']),



onBlur:PropTypes.func,



onFocus:PropTypes.func,



onChange:PropTypes.func,




onChangeText:PropTypes.func,







onContentSizeChange:PropTypes.func,



onEndEditing:PropTypes.func,





onSelectionChange:PropTypes.func,




onSubmitEditing:PropTypes.func,








onKeyPress:PropTypes.func,



onLayout:PropTypes.func,





onScroll:PropTypes.func,



placeholder:PropTypes.string,



placeholderTextColor:ColorPropType,




secureTextEntry:PropTypes.bool,



selectionColor:ColorPropType,















selectionState:PropTypes.instanceOf(DocumentSelectionState),




selection:PropTypes.shape({
start:PropTypes.number.isRequired,
end:PropTypes.number}),










value:PropTypes.string,





defaultValue:PropTypes.string,




clearButtonMode:PropTypes.oneOf([
'never',
'while-editing',
'unless-editing',
'always']),





clearTextOnFocus:PropTypes.bool,



selectTextOnFocus:PropTypes.bool,







blurOnSubmit:PropTypes.bool,

















style:Text.propTypes.style,




underlineColorAndroid:ColorPropType,












inlineImageLeft:PropTypes.string,





inlineImagePadding:PropTypes.number,



















dataDetectorTypes:PropTypes.oneOfType([
PropTypes.oneOf(DataDetectorTypes),
PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),




caretHidden:PropTypes.bool}),

getDefaultProps:function getDefaultProps(){
return{
allowFontScaling:true};

},




mixins:[NativeMethodsMixin,TimerMixin],

getInitialState:function getInitialState(){
return{layoutHeight:this._layoutHeight};
},




isFocused:function isFocused(){
return TextInputState.currentlyFocusedField()===
ReactNative.findNodeHandle(this._inputRef);
},

contextTypes:{
onFocusRequested:PropTypes.func,
focusEmitter:PropTypes.instanceOf(EventEmitter)},


_inputRef:undefined,
_focusSubscription:undefined,
_lastNativeText:undefined,
_lastNativeSelection:undefined,
_layoutHeight:-1,

componentDidMount:function componentDidMount(){var _this=this;
this._lastNativeText=this.props.value;
if(!this.context.focusEmitter){
if(this.props.autoFocus){
this.requestAnimationFrame(this.focus);
}
return;
}
this._focusSubscription=this.context.focusEmitter.addListener(
'focus',
function(el){
if(_this===el){
_this.requestAnimationFrame(_this.focus);
}else if(_this.isFocused()){
_this.blur();
}
});

if(this.props.autoFocus){
this.context.onFocusRequested(this);
}
},

componentWillUnmount:function componentWillUnmount(){
this._focusSubscription&&this._focusSubscription.remove();
if(this.isFocused()){
this.blur();
}
},

getChildContext:function getChildContext(){
return{isInAParentText:true};
},

childContextTypes:{
isInAParentText:PropTypes.bool},





clear:function clear(){
this.setNativeProps({text:''});
},

render:function render(){
if(Platform.OS==='ios'){
return this._renderIOS();
}else if(Platform.OS==='android'){
return this._renderAndroid();
}
},

_getText:function _getText(){
return typeof this.props.value==='string'?
this.props.value:

typeof this.props.defaultValue==='string'?
this.props.defaultValue:
'';

},

_setNativeRef:function _setNativeRef(ref){
this._inputRef=ref;
},

_renderIOS:function _renderIOS(){
var textContainer;

var props=_extends({},this.props);
props.style=[this.props.style];

if(props.selection&&props.selection.end==null){
props.selection={start:props.selection.start,end:props.selection.start};
}

if(!props.multiline){
if(__DEV__){
for(var propKey in onlyMultiline){
if(props[propKey]){
var error=new Error(
'TextInput prop `'+propKey+'` is only supported with multiline.');

warning(false,'%s',error.stack);
}
}
}
textContainer=
React.createElement(RCTTextField,_extends({
ref:this._setNativeRef},
props,{
onFocus:this._onFocus,
onBlur:this._onBlur,
onChange:this._onChange,
onSelectionChange:this._onSelectionChange,
onSelectionChangeShouldSetResponder:emptyFunction.thatReturnsTrue,
text:this._getText()}));

}else{
var children=props.children;
var childCount=0;
React.Children.forEach(children,function(){return++childCount;});
invariant(
!(props.value&&childCount),
'Cannot specify both value and children.');

if(childCount>=1){
children=React.createElement(Text,{style:props.style,allowFontScaling:props.allowFontScaling},children);
}
if(props.inputView){
children=[children,props.inputView];
}
props.style.unshift(styles.multilineInput);
textContainer=
React.createElement(RCTTextView,_extends({
ref:this._setNativeRef},
props,{
children:children,
onFocus:this._onFocus,
onBlur:this._onBlur,
onChange:this._onChange,
onContentSizeChange:this.props.onContentSizeChange,
onSelectionChange:this._onSelectionChange,
onTextInput:this._onTextInput,
onSelectionChangeShouldSetResponder:emptyFunction.thatReturnsTrue,
text:this._getText(),
dataDetectorTypes:this.props.dataDetectorTypes,
onScroll:this._onScroll}));

}
return(
React.createElement(TouchableWithoutFeedback,{
onLayout:props.onLayout,
onPress:this._onPress,
rejectResponderTermination:true,
accessible:props.accessible,
accessibilityLabel:props.accessibilityLabel,
accessibilityTraits:props.accessibilityTraits,
nativeID:this.props.nativeID,
testID:props.testID},
textContainer));


},

_renderAndroid:function _renderAndroid(){
var props=_extends({},this.props);
props.style=this.props.style;
if(this.state.layoutHeight>=0){
props.style=[props.style,{height:this.state.layoutHeight}];
}
props.autoCapitalize=
UIManager.AndroidTextInput.Constants.AutoCapitalizationType[
props.autoCapitalize||'sentences'];




var children=this.props.children;
var childCount=0;
React.Children.forEach(children,function(){return++childCount;});
invariant(
!(this.props.value&&childCount),
'Cannot specify both value and children.');

if(childCount>1){
children=React.createElement(Text,null,children);
}
if(props.selection&&props.selection.end==null){
props.selection={start:props.selection.start,end:props.selection.start};
}
var textContainer=
React.createElement(AndroidTextInput,_extends({
ref:this._setNativeRef},
props,{
mostRecentEventCount:0,
onFocus:this._onFocus,
onBlur:this._onBlur,
onChange:this._onChange,
onContentSizeChange:this._onContentSizeChange,
onSelectionChange:this._onSelectionChange,
onTextInput:this._onTextInput,
text:this._getText(),
children:children,
disableFullscreenUI:this.props.disableFullscreenUI,
textBreakStrategy:this.props.textBreakStrategy,
onScroll:this._onScroll}));


return(
React.createElement(TouchableWithoutFeedback,{
onLayout:this._onLayout,
onPress:this._onPress,
accessible:this.props.accessible,
accessibilityLabel:this.props.accessibilityLabel,
accessibilityComponentType:this.props.accessibilityComponentType,
nativeID:this.props.nativeID,
testID:this.props.testID},
textContainer));


},

_onFocus:function _onFocus(event){
if(this.props.onFocus){
this.props.onFocus(event);
}

if(this.props.selectionState){
this.props.selectionState.focus();
}
},

_onPress:function _onPress(event){
if(this.props.editable||this.props.editable===undefined){
this.focus();
}
},

_onChange:function _onChange(event){


if(this._inputRef){
this._inputRef.setNativeProps({
mostRecentEventCount:event.nativeEvent.eventCount});

}

var text=event.nativeEvent.text;
this.props.onChange&&this.props.onChange(event);
this.props.onChangeText&&this.props.onChangeText(text);

if(!this._inputRef){


return;
}

this._lastNativeText=text;
this.forceUpdate();
},

_onContentSizeChange:function _onContentSizeChange(event){
var contentHeight=event.nativeEvent.contentSize.height;
if(this.props.autoGrow){
if(this.props.maxHeight){
contentHeight=Math.min(this.props.maxHeight,contentHeight);
}
this.setState({layoutHeight:Math.max(this._layoutHeight,contentHeight)});
}

this.props.onContentSizeChange&&this.props.onContentSizeChange(event);
},

_onLayout:function _onLayout(event){
var height=event.nativeEvent.layout.height;
if(height){
this._layoutHeight=event.nativeEvent.layout.height;
}
this.props.onLayout&&this.props.onLayout(event);
},

_onSelectionChange:function _onSelectionChange(event){
this.props.onSelectionChange&&this.props.onSelectionChange(event);

if(!this._inputRef){


return;
}

this._lastNativeSelection=event.nativeEvent.selection;

if(this.props.selection||this.props.selectionState){
this.forceUpdate();
}
},

componentDidUpdate:function componentDidUpdate(){



var nativeProps={};

if(this._lastNativeText!==this.props.value&&typeof this.props.value==='string'){
nativeProps.text=this.props.value;
}var



selection=this.props.selection;
if(this._lastNativeSelection&&selection&&(
this._lastNativeSelection.start!==selection.start||
this._lastNativeSelection.end!==selection.end)){
nativeProps.selection=this.props.selection;
}

if(Object.keys(nativeProps).length>0&&this._inputRef){
this._inputRef.setNativeProps(nativeProps);
}

if(this.props.selectionState&&selection){
this.props.selectionState.update(selection.start,selection.end);
}
},

_onBlur:function _onBlur(event){
this.blur();
if(this.props.onBlur){
this.props.onBlur(event);
}

if(this.props.selectionState){
this.props.selectionState.blur();
}
},

_onTextInput:function _onTextInput(event){



this.props.onTextInput&&this.props.onTextInput(event);
},

_onScroll:function _onScroll(event){
this.props.onScroll&&this.props.onScroll(event);
}});


var styles=StyleSheet.create({
multilineInput:{



paddingTop:5}});



module.exports=TextInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,